package xyz.for01.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import xyz.for01.conn.Conn;
import xyz.for01.hotelvo.RoomVo;
import xyz.for01.reservation.ReservationVo;

public class ReservationDao {
	private ReservationDao() {}
	
	private static ReservationDao instance = new ReservationDao();
	
	public static ReservationDao getInstance() {
		return instance;
	}
	
	// 예약 진행 중인 방의 정보 출력하는 메소드
	public RoomVo showRoomInfo(int roomNo) {
		String sql = "SELECT R.HOTELNO, H.HOTELNAME, R.ROOMNO, R.ROOMNAME, R.PRICE FROM HOTEL H JOIN ROOM R ON H.HOTELNO = R.HOTELNO WHERE R.ROOMNO = ?";
		
		RoomVo rVo = null;
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			conn = Conn.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, roomNo);
			rs = pstmt.executeQuery();
			
			if(rs.next()) {
				rVo = new RoomVo(rs.getInt("hotelNo"), rs.getString("hotelName"), rs.getInt("roomNo"), rs.getString("roomName"), rs.getString("price"));
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		} finally {
			Conn.close(conn, pstmt, rs);
		}
		
		return rVo;
	}
	
	// 예약을 데이터베이스에 저장하는 메소드
	public int insertRes(ReservationVo rVo) {
		int result = -1;
		String sql = "INSERT INTO RESERVATION(RES_IDX, NAME, PHONE, GRADE, RES_START, RES_END, HOTELNO, ROOMNO, PRICE, RESDATE, RESSTAT) "
				+ "VALUES(RES_SEQ.NEXTVAL, ?, ?, ?, ?, ?, ?, ?, ?, SYSDATE, ?)";
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		
		try {
			conn = Conn.getConnection();
			pstmt = conn.prepareStatement(sql);
			
			pstmt.setString(1, rVo.getName());
			pstmt.setString(2, rVo.getPhone());
			pstmt.setInt(3, rVo.getGrade());
			pstmt.setDate(4, rVo.getRes_start());
			pstmt.setDate(5, rVo.getRes_end());
			pstmt.setInt(6, rVo.getHotelNo());
			pstmt.setInt(7, rVo.getRoomNo());
			pstmt.setString(8, rVo.getPrice());
			pstmt.setInt(9, rVo.getResStat());
			
			result = pstmt.executeUpdate();
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			Conn.close(conn, pstmt);
		}
		return result;
	}
	
	
}
