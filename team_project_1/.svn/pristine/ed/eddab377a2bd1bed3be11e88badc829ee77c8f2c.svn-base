package xyz.for01.controller;

import java.io.IOException;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import xyz.for01.dao.MemberDao;
import xyz.for01.membervo.MemberVo;
import xyz.for01.sha256.SecurityUtil;;

/**
 * Servlet implementation class Login
 */
// 로그인 서블릿
@WebServlet("/login")
public class LoginServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		RequestDispatcher dispatcher = request.getRequestDispatcher("login.jsp");
		dispatcher.forward(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

		SecurityUtil securityUtil = new SecurityUtil(); //암호화 클래스
		// securityUtil.encryptSHA256()

		String url = "login.jsp"; // 인증실패시 이동

		String emailid = request.getParameter("emailid");
		String pwd = securityUtil.encryptSHA256(request.getParameter("pwd"));
		String nickName = request.getParameter("nickName");
		MemberDao mDao = MemberDao.getInstance();
		MemberVo mVo = new MemberVo();
		HttpSession session = request.getSession(); // 세션에 저장하기

		if ("normal".equals(request.getParameter("loginType"))) {
			int result = mDao.userCheck(emailid, pwd);

			if (result == 1) { // 회원인증성공시
				mVo = mDao.getMember(emailid); // 회원정보가져오기
				session.setAttribute("loginUser", mVo); // 세션에 저장하기
				session.setAttribute("loginEmailId", request.getParameter("emailid").toString()); // 세션에 저장하기
				request.setAttribute("message", "회원 가입에 성공했습니다."); // 보낼 메세지 저장
				url = "main";
			} else if (result == 0) {
				request.setAttribute("message", "비밀번호가 맞지않습니다");
			} else if (result == -1) {
				request.setAttribute("message", "존재하지 않는 회원입니다");
			}
		}
//		RequestDispatcher dispatcher = request.getRequestDispatcher(url);
//		dispatcher.forward(request, response);
		response.sendRedirect(url);
	}
}
