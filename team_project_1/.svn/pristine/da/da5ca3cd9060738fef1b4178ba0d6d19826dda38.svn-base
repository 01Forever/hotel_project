package xyz.for01.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.sql.DataSource;

import xyz.for01.conn.Conn;
import xyz.for01.membervo.MemberVo;
import xyz.for01.sha256.SecurityUtil;

public class MemberDao {
	private MemberDao() {
	}

	private static MemberDao instance = new MemberDao();

	public static MemberDao getInstance() {
		return instance;
	}

	public int confirmID(String emailid) {
		int result = -1;
		String sql = "select emailid from member where emailid = ? AND delyn = 'N' ";
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			conn = Conn.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, emailid);
			rs = pstmt.executeQuery();

			if (rs.next()) {
				result = 1;
			} else {
				result = -1;
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null)
					rs.close();
				if (pstmt != null)
					pstmt.close();
				if (conn != null)
					conn.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return result;
	}

	public String memberLoginCheck(MemberVo mVo) {
		String sql = "SELECT (CASE WHEN "
				+ "(SELECT COUNT(*) FROM member WHERE emailid = ? AND delyn = 'N') < 1  THEN '1' WHEN "
				+ "(SELECT pwd FROM member WHERE emailid = ? AND delyn = 'N') = ? THEN '2' ELSE '3' END) AS result FROM dual";

		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String result = "1";

		try {
			conn = Conn.getConnection();
			pstmt = conn.prepareStatement(sql);

			pstmt.setString(1, mVo.getEmailid());
			pstmt.setString(2, mVo.getEmailid());
			pstmt.setString(3, mVo.getPwd());

			rs = pstmt.executeQuery();
			if (rs.next()) {
				result = rs.getString("result");
			} else {
				result = "1";
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (pstmt != null)
					pstmt.close();
				if (conn != null)
					conn.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return result;
	}

	public int userCheck(String emailid, String pwd) {
		int result = -1;
		String sql = "SELECT pwd FROM member WHERE emailid = ? AND delyn ='N' ";
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		SecurityUtil securityUtil = new SecurityUtil(); // 암호화 클래스
		// securityUtil.encryptSHA256()

		try {
			conn = Conn.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, emailid);
			rs = pstmt.executeQuery();

			if (rs.next()) {
				if (rs.getString("pwd") != null && rs.getString("pwd").equals(pwd))
					result = 1;
				else
					result = 0;
			} else {
				result = -1;
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null)
					rs.close();
				if (pstmt != null)
					pstmt.close();
				if (conn != null)
					conn.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return result;
	}

	public MemberVo getMember(String emailid) {
		MemberVo mVo = null;
		String sql = "SELECT emailid , nic , phone , rtrim(grade) AS grade, userno FROM member WHERE emailid = ? AND delyn ='N' ";
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			conn = Conn.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, emailid);
			rs = pstmt.executeQuery();

			if (rs.next()) {
				mVo = new MemberVo();
				mVo.setEmailid(rs.getString("emailid"));
				mVo.setNic(rs.getString("nic"));
				mVo.setPhone(rs.getString("phone"));
				mVo.setGrade(rs.getString("grade"));
				mVo.setUserno(rs.getInt("userno"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null)
					rs.close();
				if (pstmt != null)
					pstmt.close();
				if (conn != null)
					conn.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return mVo;
	}

	public int idCheck(MemberVo mVo) {
		int result = -1;
		String sql = "SELECT COUNT(*) AS cnt FROM member WHERE emailid = ? AND delyn ='N' ";
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			conn = Conn.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, mVo.getEmailid());
			rs = pstmt.executeQuery();
			if (rs.next()) {
				result = rs.getInt("cnt");
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null)
					rs.close();
				if (pstmt != null)
					pstmt.close();
				if (conn != null)
					conn.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return result;
	}

	public int insertMember(MemberVo mVo) {
		int result = -1;
		String sql = "INSERT INTO member(" + "USERNO," + "EMAILID," + "PWD," + "NIC," + "PHONE ," + "JOINDATE,"
				+ "GRADE ) VALUES(" + "USERNUM_SEQ.nextval," // USERNUM
				+ "?," // EMAILID
				+ "?," // PWD
				+ "?," // NIC
				+ "?," // PHONE
				+ "sysdate," // JOINDATE
				+ "?)"; // GRADE

		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		SecurityUtil securityUtil = new SecurityUtil(); // 암호화 클래스
		// securityUtil.encryptSHA256()

		try {
			conn = Conn.getConnection();
			pstmt = conn.prepareStatement(sql);

			pstmt.setString(1, mVo.getEmailid());
			pstmt.setString(2, securityUtil.encryptSHA256(mVo.getPwd()));
			pstmt.setString(3, mVo.getNic());
			pstmt.setString(4, mVo.getPhone());
			pstmt.setString(5, "1");
			result = pstmt.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (pstmt != null)
					pstmt.close();
				if (conn != null)
					conn.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return result;
	}

	public int Modify(MemberVo mVo) {
		int result = -1;
		String sql1 = "UPDATE member ";
		Boolean pwdModify = !"".equals(mVo.getPwd()) && mVo.getPwd() != null;
		// input - pwd가 null 이 아닐시에  !"".equals(mVo.getPwd()) =>  mVo.getPwd() != ""
		 
		sql1 += " SET ";
			
				if (pwdModify) {
					sql1 +=  " PWD = ? ,";
				}
				sql1 += " NIC = ?, "
				+ " PHONE = ? "
				+ " WHERE emailid = ? AND delyn ='N' ";

		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			conn = Conn.getConnection(); 
			pstmt = conn.prepareStatement(sql1);

			if (pwdModify) {
				pstmt.setString(1, mVo.getPwd());
				pstmt.setString(2, mVo.getNic());
				pstmt.setString(3, mVo.getPhone());
				pstmt.setString(4, mVo.getEmailid());
			}
			else {
				pstmt.setString(1, mVo.getNic());
				pstmt.setString(2, mVo.getPhone());
				pstmt.setString(3, mVo.getEmailid());
			}
			
			result = pstmt.executeUpdate();
			
			
			int result2 = -1;
			String sql2 = "INSERT INTO membermod(";
					if (pwdModify) {
						sql2 += " pwd_date,";
					}
						sql2 += " user_date, membermodno, userno)"
								+ " VALUES(";
					if (pwdModify) {
						sql2 += "sysdate,";
					}
					sql2 += " sysdate, SEQ_MEMBERMODNO.nextval, ?)";
			
			Connection conn2 = null;
			PreparedStatement pstmt2 = null;
			ResultSet rs2 = null;
			try {
				conn2 = Conn.getConnection();
				pstmt2 = conn2.prepareStatement(sql2);

				pstmt2.setInt(1, mVo.getUserno());
				result2 = pstmt2.executeUpdate();
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				try {
					if (pstmt2 != null) pstmt2.close();
					if (conn2 != null) conn2.close();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (pstmt != null) pstmt.close();
				if (conn != null) conn.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return result;
	}

	public List<MemberVo> selectAllUser() {
		String sql = "SELECT * FROM member order by joindate desc ";
		List<MemberVo> list = new ArrayList<MemberVo>();

		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			conn = Conn.getConnection();
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();

			if (rs.next()) {
				MemberVo mVo = new MemberVo();
				mVo.setEmailid(rs.getString("emailid"));
				mVo.setNic(rs.getString("nic"));
				mVo.setPhone(rs.getString("phone"));
				mVo.setGrade(rs.getString("grade"));
				mVo.setDelyn(rs.getString("delyn"));
				list.add(mVo);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null)
					rs.close();
				if (pstmt != null)
					pstmt.close();
				if (conn != null)
					conn.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return list;
	}

	public MemberVo selectUserByEmailidDelyn(String emailid, String delyn) {
		String sql = "SELECT * FROM member WHERE emailid = ? AND delyn = ?";
		MemberVo mVo = null;
		try {
			Connection conn = null;
			PreparedStatement pstmt = null;
			ResultSet rs = null;
			try {
				conn = Conn.getConnection();
				pstmt = conn.prepareStatement(sql);
				pstmt.setString(1, emailid);
				pstmt.setString(2, delyn);
				rs = pstmt.executeQuery();
				if (rs.next()) {
					mVo = new MemberVo();
					mVo.setEmailid(rs.getString("emailid"));
					mVo.setNic(rs.getString("nic"));
					mVo.setPhone(rs.getString("phone"));
					mVo.setGrade(rs.getString("grade"));
				}
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				try {
					if (rs != null)
						rs.close();
					if (pstmt != null)
						pstmt.close();
					if (conn != null)
						conn.close();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mVo;
	}

	public void userListModify(MemberVo mVo) {
		String sql = "UPDATE member " + " SET " + "nic = ? ," + "phone = ?," + "grade = ? "
				+ " WHERE emailid = ?  AND delyn = ? ";

		Connection conn = null;
		PreparedStatement pstmt = null;

		try {
			conn = Conn.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, mVo.getNic());
			pstmt.setString(2, mVo.getPhone());
			pstmt.setString(3, mVo.getGrade());
			pstmt.setString(4, mVo.getEmailid());
			pstmt.setString(5, mVo.getDelyn());
			pstmt.executeUpdate();

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (pstmt != null)
					pstmt.close();
				if (conn != null)
					conn.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

}
